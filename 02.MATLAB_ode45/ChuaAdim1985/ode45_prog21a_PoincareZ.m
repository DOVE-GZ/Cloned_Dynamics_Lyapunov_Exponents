%% ===================================================================== %%
% The code is (C) 2014-2020 Filipe I. Fazanaro, Diogo C. Soriano, Ricardo
% Suyama, Marconi K. Madrid, Jose Raimundo de Oliveira, Ignacio B. Munoz,
% Romis Attux and is released under the GPL v3 license. 
%
% Sample code based on the supplementary material associated to the work
% "Numerical Characterization of Nonlinear Dynamical Systems Using 
% Parallel Computing: The Role of GPUs Approach", which was published
% by the Communications of Nonlinear Science and Numerical Computation. 
% DOI: 10.1016/j.cnsns.2015.12.021
%
% git: https://github.com/fazanaro/Cloned_Dynamics_Lyapunov_Exponents.git
%
% ------------------------------------------------------
% Author:           Filipe Ieda Fazanaro
% Contact:          filipe.fazanaro AT ufabc.edu.br
% Initial version:  v05.02.2013.01
% Last update:      v18.06.2020.01
% ------------------------------------------------------
%
%% ===================================================================== %%
%% DESCRIPTION
%
%   - Build the Poincare section associated to the Chua's circuit 
%   oscillator dynamical model [3,4].
%
%   - The procedure is based on the data interpolation:
%       1) Search the 'z' data vector for the indexes of the points before 
%       and after to the section; 
%       2) Interpoletes the points using a simple line equation.
%
%   - Employs the 'ode45' integrator.
%
%
%% ===================================================================== %%
%% REFERENCES
%
% [1] Parker and Chua (1989) Practical Numerical algorithms for Chaotic
% Systems. Springer-Verlag.
%
% [2] Soriano, Fazanaro, Suyama, JRO, Attux and Madrid (2012) A method for
% Lyapunov spectrum estimation using cloned dynamics and its application
% toÂ the discontinuously-excited FitzHugh-Nagumo model. Nonlinear Dynamics,
% vol 67, no 1, pp 413-424.
% DOI: 10.1007/s11071-011-9989-2.
%
% [3] Matsumoto, Chua, Komuro (1985) The Double Scroll. IEEE Transactions
% on Circuits and Systems CAS-32(8), pp 798-818.
%
% [4] Arena, Baglio, Fortuna, Manganaro (1995) Chua's Circuit Can be
% Generated by CNN Cells. IEEE Transactions on circuits ans Systems - I:
% fundamental, Theory and Applications, vol 42, no 2, February, pp 123-125.
%% ===================================================================== %%

clc
close all
clear all


%% ===================================================================== %%
%% DYNAMICAL SYSTEM DIMENSION

dim = 3;

dim_total = dim*(dim+1);

%% ===================================================================== %%
%% PARAMETERS
%
%   - See [3] for aditional details

% -------------------------------------------------------------------------
% C1 = 1/7;
% C2 = 1/1;
% L  = 1/7;
% RL = 0;
% G  = 0.7;
% m0 = -0.5;
% m1 = -0.8;
% Bp = 1;
% 
% alpha = C2/C1;
% beta  = C2/(L*G^2);
% gamma = (RL*C2)/(G*L);
% 
% a = m1/G;
% b = m0/G;
% -------------------------------------------------------------------------

% -------------------------------------------------------------------------
alpha = 9;
beta  = 100/7;
gamma = 0;

a = -8/7;
b = -5/7;
% -------------------------------------------------------------------------

%% ===================================================================== %%
%% INITIAL CONDITIONS OF THE DYNAMICAL SYSTEM

vX0 = 0.15264;
vY0 = -0.02281;
vZ0 = 0.38127;

% Complete system
y_init = [ vX0, vY0, vZ0 ];

%% ===================================================================== %%
%% INTEGRATION PARAMETERS

% Initial time
t_init = 0;

% Final time
t_final = 3500;

% Transient
t_trans = 1500;

% Time step
t_step = 0.01;


% Time span
tspan = t_init:t_step:t_final;


% Transient index
index_trans = round(t_trans/t_step);


% Define the Poincare section
%   - It is important to refer to the time response to adjust this value
Threshold = 0.0;

% Used to interpolate the points
CoefAngular = 0;
CoefLinear  = 0;

% Store the indexes of the points used to define the Poincare section
index = [];

% Aux
aux = 1;

% 'ode45' options
Options = odeset('RelTol',1e-8,'AbsTol',1e-8);

%% ===================================================================== %%

fprintf ( 1, '\n  Computation begun at %s.\n\n', datestr ( now ) );

tbase = tic();

%% ===================================================================== %%
%% DYNAMICAL SYSTEM INTEGRATION

[T,Y] = ode45(@(t,y) ChuaAdim1985( t, y, alpha, beta, gamma, a, b ), tspan, y_init, Options);

%% ===================================================================== %%
%% DEFINE THE POINCARE SECTION
%
%   (1) Check when the system passthrough the section (= 'Threshold');
%   (2) Obtain the indexes of the points before and after;
%   (3) Interpolate the points;
%   (4) Estimates the value of the state variables (in this case, 'x' and
%   'y') for the section

% Ignore the transient and create a line vector
varX = Y(index_trans:end,1)';
varY = Y(index_trans:end,2)';
varZ = Y(index_trans:end,3)';

% STEP 01
%   - Search for the indexes
%   - Ignore the last point of the line vector
for ii = 1:(length(varZ)-1)
    
    % If the point is positioned exactly on the Poincare section
    if varZ(ii) == Threshold
        
        index(aux) = ii;
        aux = aux + 1;
        
    % ------------------------------------------------------------------- %
    % ONE CAN DO THE SAMPLE CONSIDERING THAT THE SYSTEM CROSS THE
    % POINCARE SECTION FROM BOTH SIDES
    elseif (varZ(ii) >= Threshold)&&(varZ(ii+1) <= Threshold) || ...
            (varZ(ii) <= Threshold)&&(varZ(ii+1) >= Threshold)
    % ------------------------------------------------------------------- %
%     % CONSIDERING ONLY FROM THE NEGATIVE SIDE
%     elseif (varZ(ii) >= Threshold)&&(varZ(ii+1) <= Threshold)
    % ------------------------------------------------------------------- % 
%     % CONSIDERING ONLY THE POSITIVE SIDE
%     elseif (varZ(ii) <= Threshold)&&(varZ(ii+1) >= Threshold)
    % ------------------------------------------------------------------- %        
        index(aux) = ii;
        aux = aux + 1;

    end
    
end


% Reset the aux
aux = 1;


% STEP 02
%   - Adjust the curve
for ii = 1:length(index)
    
    % ------------------------------------------------------------------- %
    % SAMPLE 'X'
    % Calculate the curve coefficients associate to the 'x' interpolation
    
    CoefAngular = (varZ(index(ii)+1)-varZ(index(ii)))/(varX(index(ii)+1)-varX(index(ii)));
    CoefLinear = ((varZ(index(ii)+1)+varZ(index(ii)))-CoefAngular*(varX(index(ii)+1)+varX(index(ii))))/2;
    
    % Estimates the 'x' value if the system was sampled exactly on the
    % Poincare section
    PoincareX(ii) = (Threshold - CoefLinear)/CoefAngular;
    
    % ------------------------------------------------------------------- %
    % SAMPLE 'Y'
    % Calculate the curve coefficients associate to the 'y' interpolation
    
    CoefAngular = (varZ(index(ii)+1)-varZ(index(ii)))/(varY(index(ii)+1)-varY(index(ii)));
    CoefLinear = ((varZ(index(ii)+1)+varZ(index(ii)))-CoefAngular*(varY(index(ii)+1)+varY(index(ii))))/2;
    
    % Estimates the 'x' value if the system was sampled exactly on the
    % Poincare section
    PoincareY(ii) = (Threshold - CoefLinear)/CoefAngular;
    % ------------------------------------------------------------------- %
    
end

%% ===================================================================== %%

fprintf ( 1, '\n  Computation completed at %s.\n', datestr ( now ) );

cpuTime = toc( tbase );

fprintf('Total execution time [s] = %.4f\n\n',cpuTime);

%% ===================================================================== %%
%% PLOT

close all

% ----------------------------------------------------------------------- %

set(0,'DefaultTextFontName','Times', ...
    'DefaultTextFontSize', 18, ...
    'DefaultAxesFontName', 'Times', ...
    'DefaultAxesFontSize', 18, ...
    'DefaultLineLineWidth', 1, ...
    'DefaultLineMarkerSize', 7.75);

% ----------------------------------------------------------------------- %
% http://dgleich.wordpress.com/2013/06/04/creating-high-quality-graphics-in-matlab-for-papers-and-presentations/
%
% Defaults for this blog post

width = 3;                  % Width in inches

height = 3;                 % Height in inches

AxesLineWidth = 0.75;       % AxesLineWidth

FontSize = 18;              % Fontsize

LFontSize = 18;             % Legend Fontsize

AnnotationFontSize = 20;    % Annotation Fontsize

LineWidth = 1;              % LineWidth

MarkerSize = 2;             % MarkerSize

% ----------------------------------------------------------------------- %

hFig1 = figure( 'visible', 'on' );
hax1 = axes( 'Parent', hFig1, 'FontSize', FontSize );

box( hax1, 'on' );
hold(hax1, 'all' );
grid(hax1, 'off' );



plot(PoincareX, PoincareY, ...
    'LineStyle', 'none', ...
    'Marker', '.', ...
    'MarkerSize', MarkerSize);



axis([-1.0 1.0 -0.5 0.5]);



% Adjusting the x- and y-labels positioning
set( hax1, 'Units', 'Normalized' );

pos = get( hax1, 'Position' );

offset = 0.01;

set( hax1, ...
    'XGrid'       , 'off'                        , ...
    'YGrid'       , 'off'                        , ...
    'Position'    , pos + [0, offset, 0, -offset] );

hx = xlabel( '$x$', 'Interpreter', 'latex' );
hy = ylabel( '$y$', 'Interpreter', 'latex' );

set(hx, 'Units', 'Normalized');
set(hy, 'Units', 'Normalized');

pos_xlabel = get(hx, 'Position');
pos_ylabel = get(hy, 'Position');

set(hx, 'Position', pos_xlabel + [0, (-0)*offset, 0]);
set(hy, 'Position', pos_ylabel + [-offset, 0, 0]);

% ----------------------------------------------------------------------- %

% Print

% sGraficoEPS = ['print -depsc2 -r600 <put_the_name_here>.eps'];
% eval(sGraficoEPS);

% sGraficoJPG = ['print -djpeg -r600 <put_the_name_here>.jpg'];
% eval(sGraficoJPG);

% sGraficoPNG = ['print -dpng -r600 <put_the_name_here>.png'];
% eval(sGraficoPNG);

% ======================================================================= %


%% ===================================================================== %%
%% EOF: End Of File
%% ===================================================================== %%